class inser_text:
    pass
'''
Кузнечик находится на Бирже, которая является числовой прямой, в клетке №1 и собирается заработать денег.
В каждой клетке числовой прямой, которую он посещает, он вынужден заключить сделку со всеми имеющимися средствами.
При этом он может получить как прибыль, так и убыток. Прибыльность каждой клетки задана процентами со знаком.
Если знак положительный — сделка увеличивает сумму денег Кузнечика на указанный процент от его текущей суммы.
Если отрицательный — сделка уменьшает сумму денег Кузнечика на указанный процент.
В самой клетке №1 никакой сделки не заключается.
Вывести на экран путь, максимизирующий сумму, которую сможет заработать Кузнечик на бирже,
 если он может совершать прыжки на клетку с номером +2 и +3 от текущей, но не может прыгнуть на соседнюю клетку.
Обратите внимание, что Кузнечик не обязан останавливаться в точке последней возможной сделки!
Более того, если совершение сделок окажется убыточным, Кузнечик имеет право остаться в клетке №1 с исходным капиталом.
Формат входных данных
В первой строке записано целое число — стартовый капитал Кузнечика.
Во второй строке записаны целые числа — проценты со знаком + или -. Доходность не превышает 1000%, а убыточность -100%.
Отрицательный баланс у Кузнечика недопустим. Максимальный номер клетки задаётся количеством чисел в строке ввода.
Формат выходных данных
Клетки, по которым должен пройти Кузнечик, чтобы получить максимальную выгоду.
'''
init_money = int(input())
row = list(map(lambda x: 1 + 0.01*int(x), input().split()))


def grasshooper (row, start_sum):
    if len(row) < 3:
        return [1]
    else:
        costs = [start_sum, float('-inf'), start_sum * row[2]] + [start_sum for i in range(len(row)-3)]
        for i in range(3, len(row)):
            if costs[i - 3] > costs[i - 2]:
                costs[i] = costs[i-3] * row[i]
            elif costs[i - 3] < costs[i - 2]:
                costs[i] = costs[i-2] * row[i]
        finish = costs.index(max(costs))
        way = [finish]
        if finish in {0, 1}:
            return [0]
        if finish == 2:
            return [0, 2]
        if finish == 3:
            return [0, 3]
        while way[-1] != 0:
            current = way[-1]
            if current - 3 >= 0 and costs[current - 3] > costs[current - 2]:
                way.append(current - 3)
            else:
                way.append(current - 2)
    return way[::-1]
print(*[i+1 for i in grasshooper(row, init_money)])




